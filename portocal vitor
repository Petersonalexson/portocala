Option Explicit

Sub PopulateForecastTables()
    ' This macro populates tables in the Forecast sheet based on data from imported sheet
    ' It includes detailed logging to help diagnose issues
    
    Dim specificSheet As Worksheet
    Dim accountMappingSheet As Worksheet
    Dim refMappingSheet As Worksheet
    Dim forecastSheet As Worksheet
    Dim logSheet As Worksheet
    Dim instructionsSheet As Worksheet
    Dim i As Long, j As Long, k As Long
    Dim ccPositions As Variant
    Dim specificSheetName As String
    Dim logRow As Long
    
    ' For processing data
    Dim dataDict As Object
    Dim dictKey As String
    Dim natAccount As String, cc As String, desc2 As String
    Dim amount As Double
    Dim ccFound As Boolean
    
    ' For period mapping
    Dim periodMappings As Object
    Dim periodFromA1 As String
    Dim targetPeriodFormat As String
    Dim ccPeriodColumns As Object  ' Dictionary to store period columns for each CC
    
    ' For description 2 mapping
    Dim desc2Mappings As Object
    
    ' Variables for other loops
    Dim currentRow As Long
    Dim blankRowCount As Long
    Dim fromPeriod As String
    Dim toPeriod As String
    Dim fromDesc2 As String
    Dim toDesc2 As String
    Dim ccRow As Long
    Dim ccValue As String
    Dim periodFound As Boolean
    Dim headerValue As String
    Dim tempAmount As String
    Dim mappingLastRow As Long
    Dim mappedDesc2 As String
    Dim dictKeys As Variant
    Dim parts As Variant
    Dim currentCC As String
    Dim currentDesc2 As String
    Dim entriesPopulated As Long
    Dim rowsProcessed As Long
    Dim rowsSkipped As Long 
    Dim mappingsFound As Long
    Dim ccDescFound As Long
    Dim periodCol As Long
    Dim descFound As Boolean
    Dim searchEndRow As Long
    Dim lastRow As Long
    Dim clearStartRow As Long
    Dim clearEndRow As Long
    Dim colToClear As Long
    Dim formatStartRow As Long
    Dim formatEndRow As Long
    Dim colToFormat As Long
    Dim formattingCC As String
    
    ' Initialize dictionaries
    Set dataDict = CreateObject("Scripting.Dictionary")
    Set periodMappings = CreateObject("Scripting.Dictionary")
    Set ccPeriodColumns = CreateObject("Scripting.Dictionary")
    Set desc2Mappings = CreateObject("Scripting.Dictionary")
    
    ' Initialize the CC positions in the Forecast sheet
    ccPositions = Array(6, 22, 38, 54, 70)
    
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.Calculation = xlCalculationManual
    
    ' Create log sheet if it doesn't exist
    On Error Resume Next
    Set logSheet = ThisWorkbook.Sheets("ProcessLog")
    If logSheet Is Nothing Then
        Set logSheet = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        logSheet.Name = "ProcessLog"
        
        ' Add headers to log sheet
        logSheet.Cells(1, 1).Value = "Timestamp"
        logSheet.Cells(1, 2).Value = "Action"
        logSheet.Cells(1, 3).Value = "Details"
        logSheet.Cells(1, 4).Value = "Result"
    End If
    On Error GoTo 0
    
    ' Start logging
    logRow = logSheet.Cells(logSheet.Rows.Count, 1).End(xlUp).Row + 1
    logSheet.Cells(logRow, 1).Value = Now()
    logSheet.Cells(logRow, 2).Value = "Process Start"
    logSheet.Cells(logRow, 3).Value = "Starting population of Forecast tables"
    logSheet.Cells(logRow, 4).Value = "Info"
    logRow = logRow + 1
    
    ' Get the imported sheet name from Instructions D7
    Set instructionsSheet = ThisWorkbook.Sheets("Instructions")
    
    If instructionsSheet Is Nothing Then
        logSheet.Cells(logRow, 1).Value = Now()
        logSheet.Cells(logRow, 2).Value = "Error"
        logSheet.Cells(logRow, 3).Value = "Could not find 'Instructions' sheet"
        logSheet.Cells(logRow, 4).Value = "Error"
        logRow = logRow + 1
        MsgBox "Could not find 'Instructions' sheet", vbExclamation
        GoTo CleanupAndExit
    End If
    
    specificSheetName = instructionsSheet.Range("D7").Value
    
    If specificSheetName = "" Then
        logSheet.Cells(logRow, 1).Value = Now()
        logSheet.Cells(logRow, 2).Value = "Error"
        logSheet.Cells(logRow, 3).Value = "Missing sheet name in Instructions cell D7"
        logSheet.Cells(logRow, 4).Value = "Error"
        logRow = logRow + 1
        MsgBox "Missing sheet name in Instructions cell D7", vbExclamation
        GoTo CleanupAndExit
    End If
    
    logSheet.Cells(logRow, 1).Value = Now()
    logSheet.Cells(logRow, 2).Value = "Sheet Identified"
    logSheet.Cells(logRow, 3).Value = "Using sheet: " & specificSheetName
    logSheet.Cells(logRow, 4).Value = "Success"
    logRow = logRow + 1
    
    ' Find required sheets
    On Error Resume Next
    Set specificSheet = ThisWorkbook.Sheets(specificSheetName)
    Set accountMappingSheet = ThisWorkbook.Sheets("Account Mapping")
    Set refMappingSheet = ThisWorkbook.Sheets("Reference mapping")
    Set forecastSheet = ThisWorkbook.Sheets("Forecast")
    On Error GoTo 0
    
    ' Verify all required sheets exist
    If specificSheet Is Nothing Then
        logSheet.Cells(logRow, 1).Value = Now()
        logSheet.Cells(logRow, 2).Value = "Error"
        logSheet.Cells(logRow, 3).Value = "Could not find sheet '" & specificSheetName & "'"
        logSheet.Cells(logRow, 4).Value = "Error"
        logRow = logRow + 1
        MsgBox "Could not find sheet '" & specificSheetName & "'", vbExclamation
        GoTo CleanupAndExit
    End If
    
    If accountMappingSheet Is Nothing Then
        logSheet.Cells(logRow, 1).Value = Now()
        logSheet.Cells(logRow, 2).Value = "Error"
        logSheet.Cells(logRow, 3).Value = "Could not find 'Account Mapping' sheet"
        logSheet.Cells(logRow, 4).Value = "Error"
        logRow = logRow + 1
        MsgBox "Could not find 'Account Mapping' sheet", vbExclamation
        GoTo CleanupAndExit
    End If
    
    If refMappingSheet Is Nothing Then
        logSheet.Cells(logRow, 1).Value = Now()
        logSheet.Cells(logRow, 2).Value = "Error"
        logSheet.Cells(logRow, 3).Value = "Could not find 'Reference mapping' sheet"
        logSheet.Cells(logRow, 4).Value = "Error"
        logRow = logRow + 1
        MsgBox "Could not find 'Reference mapping' sheet", vbExclamation
        GoTo CleanupAndExit
    End If
    
    If forecastSheet Is Nothing Then
        logSheet.Cells(logRow, 1).Value = Now()
        logSheet.Cells(logRow, 2).Value = "Error"
        logSheet.Cells(logRow, 3).Value = "Could not find 'Forecast' sheet"
        logSheet.Cells(logRow, 4).Value = "Error"
        logRow = logRow + 1
        MsgBox "Could not find 'Forecast' sheet", vbExclamation
        GoTo CleanupAndExit
    End If
    
    logSheet.Cells(logRow, 1).Value = Now()
    logSheet.Cells(logRow, 2).Value = "Sheets Verified"
    logSheet.Cells(logRow, 3).Value = "All required sheets found"
    logSheet.Cells(logRow, 4).Value = "Success"
    logRow = logRow + 1
    
    ' Verify required headers in SPECIFIC SHEET
    If specificSheet.Range("A1").Value = "" Or _
       specificSheet.Range("C1").Value = "" Or _
       specificSheet.Range("E1").Value = "" Or _
       specificSheet.Range("O1").Value = "" Then
        logSheet.Cells(logRow, 1).Value = Now()
        logSheet.Cells(logRow, 2).Value = "Error"
        logSheet.Cells(logRow, 3).Value = "Missing required headers in " & specificSheetName
        logSheet.Cells(logRow, 4).Value = "Error"
        logRow = logRow + 1
        logSheet.Cells(logRow, 1).Value = Now()
        logSheet.Cells(logRow, 2).Value = "Details"
        logSheet.Cells(logRow, 3).Value = "Check A1, C1, E1, O1"
        logSheet.Cells(logRow, 4).Value = "Info"
        logRow = logRow + 1
        MsgBox "Missing required headers in " & specificSheetName & vbNewLine & "Check A1, C1, E1, O1", vbExclamation
        GoTo CleanupAndExit
    End If
    
    ' Verify required headers in Account Mapping
    If accountMappingSheet.Range("B1").Value = "" Or _
       accountMappingSheet.Range("D1").Value = "" Then
        logSheet.Cells(logRow, 1).Value = Now()
        logSheet.Cells(logRow, 2).Value = "Error"
        logSheet.Cells(logRow, 3).Value = "Missing required headers in Account Mapping"
        logSheet.Cells(logRow, 4).Value = "Error"
        logRow = logRow + 1
        logSheet.Cells(logRow, 1).Value = Now()
        logSheet.Cells(logRow, 2).Value = "Details"
        logSheet.Cells(logRow, 3).Value = "Check B1, D1"
        logSheet.Cells(logRow, 4).Value = "Info"
        logRow = logRow + 1
        MsgBox "Missing required headers in Account Mapping" & vbNewLine & "Check B1, D1", vbExclamation
        GoTo CleanupAndExit
    End If
    
    logSheet.Cells(logRow, 1).Value = Now()
    logSheet.Cells(logRow, 2).Value = "Headers Verified"
    logSheet.Cells(logRow, 3).Value = "All required headers found"
    logSheet.Cells(logRow, 4).Value = "Success"
    logRow = logRow + 1
    
    ' Read period value from cell A1 in specific sheet to aggregate by
    periodFromA1 = specificSheet.Range("A1").Value
    
    ' Log the period value
    logSheet.Cells(logRow, 1).Value = Now()
    logSheet.Cells(logRow, 2).Value = "Period Identified"
    logSheet.Cells(logRow, 3).Value = "Period from A1: " & periodFromA1
    logSheet.Cells(logRow, 4).Value = "Success"
    logRow = logRow + 1
    
    ' Load period mappings from Reference mapping
    ' Read from column F (SPECIFIC SHEET format) to column C (Forecast format)
    currentRow = 2  ' Start from row 2 (assuming row 1 has headers)
    blankRowCount = 0
    
    logSheet.Cells(logRow, 1).Value = Now()
    logSheet.Cells(logRow, 2).Value = "Period Mapping"
    logSheet.Cells(logRow, 3).Value = "Loading period mappings (F->C)"
    logSheet.Cells(logRow, 4).Value = "Info"
    logRow = logRow + 1
    
    ' Load period mappings from F to C columns, stopping after 3 blank rows
    Do While blankRowCount < 3
        fromPeriod = Trim(CStr(refMappingSheet.Cells(currentRow, "F").Value))
        toPeriod = Trim(CStr(refMappingSheet.Cells(currentRow, "C").Value))
        
        If fromPeriod = "" And toPeriod = "" Then
            blankRowCount = blankRowCount + 1
        Else
            blankRowCount = 0  ' Reset blank row counter
            
            If fromPeriod <> "" And toPeriod <> "" Then
                ' Add mapping
                If Not periodMappings.Exists(fromPeriod) Then
                    periodMappings.Add fromPeriod, toPeriod
                    
                    ' Log the mapping
                    logSheet.Cells(logRow, 1).Value = Now()
                    logSheet.Cells(logRow, 2).Value = "Period Mapping Added"
                    logSheet.Cells(logRow, 3).Value = "From " & fromPeriod & " to " & toPeriod
                    logSheet.Cells(logRow, 4).Value = "Info"
                    logRow = logRow + 1
                End If
            End If
        End If
        
        currentRow = currentRow + 1
    Loop
    
    ' Map the period in A1 to the forecast format
    targetPeriodFormat = periodFromA1  ' Default to use as-is
    
    If periodMappings.Exists(periodFromA1) Then
        targetPeriodFormat = periodMappings(periodFromA1)
        
        logSheet.Cells(logRow, 1).Value = Now()
        logSheet.Cells(logRow, 2).Value = "Period Mapped"
        logSheet.Cells(logRow, 3).Value = "Mapped period " & periodFromA1 & " to " & targetPeriodFormat
        logSheet.Cells(logRow, 4).Value = "Success"
        logRow = logRow + 1
    Else
        logSheet.Cells(logRow, 1).Value = Now()
        logSheet.Cells(logRow, 2).Value = "Period Not Mapped"
        logSheet.Cells(logRow, 3).Value = "No mapping found for period " & periodFromA1 & ", using as-is"
        logSheet.Cells(logRow, 4).Value = "Warning"
        logRow = logRow + 1
    End If
    
    ' Load Description 2 mappings from Reference mapping
    ' Read from column H (Account Mapping format) to column I (Forecast format)
    logSheet.Cells(logRow, 1).Value = Now()
    logSheet.Cells(logRow, 2).Value = "Description 2 Mapping"
    logSheet.Cells(logRow, 3).Value = "Loading Description 2 mappings (H->I)"
    logSheet.Cells(logRow, 4).Value = "Info"
    logRow = logRow + 1
    
    currentRow = 2  ' Start from row 2 (assuming row 1 has headers)
    blankRowCount = 0
    
    ' Load Description 2 mappings from H to I columns, stopping after 3 blank rows
    Do While blankRowCount < 3
        fromDesc2 = Trim(CStr(refMappingSheet.Cells(currentRow, "H").Value))
        toDesc2 = Trim(CStr(refMappingSheet.Cells(currentRow, "I").Value))
        
        If fromDesc2 = "" And toDesc2 = "" Then
            blankRowCount = blankRowCount + 1
        Else
            blankRowCount = 0  ' Reset blank row counter
            
            If fromDesc2 <> "" And toDesc2 <> "" Then
                ' Add mapping
                If Not desc2Mappings.Exists(fromDesc2) Then
                    desc2Mappings.Add fromDesc2, toDesc2
                    
                    ' Log the mapping
                    logSheet.Cells(logRow, 1).Value = Now()
                    logSheet.Cells(logRow, 2).Value = "Description 2 Mapping Added"
                    logSheet.Cells(logRow, 3).Value = "From " & fromDesc2 & " to " & toDesc2
                    logSheet.Cells(logRow, 4).Value = "Info"
                    logRow = logRow + 1
                End If
            End If
        End If
        
        currentRow = currentRow + 1
    Loop
    
    ' For each CC, scan to the right to find the target period column
    For i = 0 To UBound(ccPositions)
        ccRow = ccPositions(i)
        ccValue = CStr(forecastSheet.Cells(ccRow, 3).Value) ' CC value in column C
        periodFound = False
        
        ' Log that we're checking this CC
        logSheet.Cells(logRow, 1).Value = Now()
        logSheet.Cells(logRow, 2).Value = "Scanning CC"
        logSheet.Cells(logRow, 3).Value = "Checking CC: " & ccValue & " for period " & targetPeriodFormat
        logSheet.Cells(logRow, 4).Value = "Info"
        logRow = logRow + 1
        
        ' Scan to the right of CC to find the matching period
        blankRowCount = 0
        For j = 4 To 200 ' Start at column D (4) and check up to 200 columns
            headerValue = CStr(forecastSheet.Cells(ccRow, j).Value)
            
            ' Check for blank cells
            If Trim(headerValue) = "" Then
                blankRowCount = blankRowCount + 1
                
                ' Stop scanning after 3 consecutive blank cells
                If blankRowCount >= 3 Then
                    logSheet.Cells(logRow, 1).Value = Now()
                    logSheet.Cells(logRow, 2).Value = "End of Headers"
                    logSheet.Cells(logRow, 3).Value = "Found 3 consecutive blank cells, stopping scan for CC " & ccValue
                    logSheet.Cells(logRow, 4).Value = "Info"
                    logRow = logRow + 1
                    Exit For
                End If
            Else
                blankRowCount = 0  ' Reset blank counter
                
                ' Log non-empty headers for debugging
                logSheet.Cells(logRow, 1).Value = Now()
                logSheet.Cells(logRow, 2).Value = "Header Found"
                logSheet.Cells(logRow, 3).Value = "Column " & j & " has value: " & headerValue
                logSheet.Cells(logRow, 4).Value = "Debug"
                logRow = logRow + 1
                
                ' Check if this is our target period
                If headerValue = targetPeriodFormat Then
                    ' Found the period column for this CC
                    If Not ccPeriodColumns.Exists(ccValue) Then
                        ccPeriodColumns.Add ccValue, j
                    End If
                    
                    logSheet.Cells(logRow, 1).Value = Now()
                    logSheet.Cells(logRow, 2).Value = "Period Column Found"
                    logSheet.Cells(logRow, 3).Value = "For CC " & ccValue & ", found period " & targetPeriodFormat & " in column " & j
                    logSheet.Cells(logRow, 4).Value = "Success"
                    logRow = logRow + 1
                    
                    periodFound = True
                    Exit For
                End If
            End If
        Next j
        
        ' If period not found for this CC, log a warning
        If Not periodFound Then
            logSheet.Cells(logRow, 1).Value = Now()
            logSheet.Cells(logRow, 2).Value = "Period Not Found"
            logSheet.Cells(logRow, 3).Value = "Could not find period " & targetPeriodFormat & " for CC " & ccValue
            logSheet.Cells(logRow, 4).Value = "Warning"
            logRow = logRow + 1
            
            ' Default to column D (4) for this CC
            If Not ccPeriodColumns.Exists(ccValue) Then
                ccPeriodColumns.Add ccValue, 4
            End If
        End If
    Next i
    
    ' Process each row of SPECIFIC SHEET to aggregate data
    lastRow = specificSheet.Cells(specificSheet.Rows.Count, "A").End(xlUp).Row
    
    ' Log the number of rows to process
    logSheet.Cells(logRow, 1).Value = Now()
    logSheet.Cells(logRow, 2).Value = "Data Processing"
    logSheet.Cells(logRow, 3).Value = "Processing " & (lastRow - 1) & " data rows from " & specificSheetName
    logSheet.Cells(logRow, 4).Value = "Info"
    logRow = logRow + 1
    
    ' First pass: Aggregate amounts by Cost Center and Description 2
    rowsProcessed = 0
    rowsSkipped = 0
    mappingsFound = 0
    ccDescFound = 0
    
    For i = 2 To lastRow ' Starting from row 2 assuming row 1 has headers
        ' Get values from SPECIFIC SHEET
        On Error Resume Next
        natAccount = CStr(specificSheet.Cells(i, 3).Value) ' Nat Accounts in column C
        cc = CStr(specificSheet.Cells(i, 5).Value) ' CC in column E
        
        ' Check if the amount cell has a value
        amount = 0 ' Default to 0
        If Not IsEmpty(specificSheet.Cells(i, 15)) Then
            If IsNumeric(specificSheet.Cells(i, 15).Value) Then
                amount = CDbl(specificSheet.Cells(i, 15).Value) ' Amounts in column O
            Else
                ' Try to handle comma decimal separators
                tempAmount = CStr(specificSheet.Cells(i, 15).Value)
                tempAmount = Replace(tempAmount, ",", ".")
                If IsNumeric(tempAmount) Then
                    amount = CDbl(tempAmount)
                End If
            End If
        End If
        On Error GoTo 0
        
        ' Skip if any essential value is missing
        If Len(Trim(natAccount)) = 0 Or Len(Trim(cc)) = 0 Then
            rowsSkipped = rowsSkipped + 1
            GoTo NextDataRow
        End If
        
        ' Find the Description 2 in Account Mapping for this Nat Account
        desc2 = ""
        mappingLastRow = accountMappingSheet.Cells(accountMappingSheet.Rows.Count, "B").End(xlUp).Row
        
        For j = 2 To mappingLastRow ' Assuming row 1 has headers
            On Error Resume Next
            If CStr(accountMappingSheet.Cells(j, 2).Value) = natAccount Then ' Column B has Account numbers
                desc2 = CStr(accountMappingSheet.Cells(j, 4).Value) ' Column D has Description 2
                mappingsFound = mappingsFound + 1
                Exit For
            End If
            On Error GoTo 0
        Next j
        
        If Len(Trim(desc2)) = 0 Then
            ' If no mapping found, log it and skip this row
            logSheet.Cells(logRow, 1).Value = Now()
            logSheet.Cells(logRow, 2).Value = "Mapping Missing"
            logSheet.Cells(logRow, 3).Value = "No Description 2 mapping found for account " & natAccount
            logSheet.Cells(logRow, 4).Value = "Warning"
            logRow = logRow + 1
            rowsSkipped = rowsSkipped + 1
            GoTo NextDataRow
        End If
        
        ' Map Description 2 to the format used in Forecast sheet
        mappedDesc2 = desc2 ' Default to use as-is
        
        On Error Resume Next
        If desc2Mappings.Exists(CStr(desc2)) Then
            mappedDesc2 = CStr(desc2Mappings(CStr(desc2)))
        Else
            logSheet.Cells(logRow, 1).Value = Now()
            logSheet.Cells(logRow, 2).Value = "Desc2 Mapping Missing"
            logSheet.Cells(logRow, 3).Value = "No mapping found for Description 2: " & desc2 & ". Using as-is."
            logSheet.Cells(logRow, 4).Value = "Warning"
            logRow = logRow + 1
        End If
        On Error GoTo 0
        
        ' Create a unique key for this CC and mapped Description 2 combination
        dictKey = cc & "|" & mappedDesc2
        
        ' Add to or update dictionary
        On Error Resume Next
        If dataDict.Exists(dictKey) Then
            dataDict(dictKey) = dataDict(dictKey) + amount
        Else
            dataDict.Add dictKey, amount
        End If
        On Error GoTo 0
        
        rowsProcessed = rowsProcessed + 1
        
NextDataRow:
    Next i
    
    ' Log the aggregation results
    logSheet.Cells(logRow, 1).Value = Now()
    logSheet.Cells(logRow, 2).Value = "Aggregation Complete"
    logSheet.Cells(logRow, 3).Value = "Processed " & rowsProcessed & " rows, skipped " & rowsSkipped & " rows"
    logSheet.Cells(logRow, 4).Value = "Success"
    logRow = logRow + 1
    
    logSheet.Cells(logRow, 1).Value = Now()
    logSheet.Cells(logRow, 2).Value = "Unique Combinations"
    logSheet.Cells(logRow, 3).Value = "Found " & dataDict.Count & " unique CC and Description 2 combinations"
    logSheet.Cells(logRow, 4).Value = "Info"
    logRow = logRow + 1
    
    ' Clear previous values in the period columns for each CC
    For i = 0 To UBound(ccPositions)
        ccValue = CStr(forecastSheet.Cells(ccPositions(i), 3).Value)
        
        ' Only clear if we found a period column for this CC
        If ccPeriodColumns.Exists(ccValue) Then
            colToClear = ccPeriodColumns(ccValue)
            
            ' Calculate range to clear
            clearStartRow = ccPositions(i) + 1
            
            If i < UBound(ccPositions) Then
                clearEndRow = ccPositions(i + 1) - 2
            Else
                clearEndRow = ccPositions(i) + 15
            End If
            
            ' Clear the column
            forecastSheet.Range(forecastSheet.Cells(clearStartRow, colToClear), _
                               forecastSheet.Cells(clearEndRow, colToClear)).ClearContents
            
            ' Log the column clearing
            logSheet.Cells(logRow, 1).Value = Now()
            logSheet.Cells(logRow, 2).Value = "Data Cleared"
            logSheet.Cells(logRow, 3).Value = "For CC " & ccValue & ", cleared column " & colToClear & " rows " & clearStartRow & " to " & clearEndRow
            logSheet.Cells(logRow, 4).Value = "Success"
            logRow = logRow + 1
        End If
    Next i
    
    ' Second pass: Populate the Forecast sheet with aggregated data
    dictKeys = dataDict.Keys
    entriesPopulated = 0
    
    ' Loop through each unique CC and Description 2 combination
    For i = 0 To dataDict.Count - 1
        On Error Resume Next
        ' Split the dictionary key back into CC and Description 2
        parts = Split(dictKeys(i), "|")
        If UBound(parts) >= 1 Then
            currentCC = parts(0)
            currentDesc2 = parts(1)
            amount = dataDict(dictKeys(i))
        Else
            ' Skip this entry if the key doesn't split properly
            logSheet.Cells(logRow, 1).Value = Now()
            logSheet.Cells(logRow, 2).Value = "Invalid Key"
            logSheet.Cells(logRow, 3).Value = "Dictionary key could not be split: " & dictKeys(i)
            logSheet.Cells(logRow, 4).Value = "Warning"
            logRow = logRow + 1
            GoTo NextCombination
        End If
        On Error GoTo 0
        
        ' Skip if we don't have a period column for this CC
        If Not ccPeriodColumns.Exists(currentCC) Then
            logSheet.Cells(logRow, 1).Value = Now()
            logSheet.Cells(logRow, 2).Value = "No Column"
            logSheet.Cells(logRow, 3).Value = "No period column found for CC " & currentCC
            logSheet.Cells(logRow, 4).Value = "Warning"
            logRow = logRow + 1
            GoTo NextCombination
        End If
        
        ' Get the column number for this CC
        periodCol = ccPeriodColumns(currentCC)
        
        ' Find which CC position to use in the Forecast sheet
        ccFound = False
        
        For j = 0 To UBound(ccPositions)
            On Error Resume Next
            If CStr(forecastSheet.Cells(ccPositions(j), 3).Value) = currentCC Then
                ccFound = True
                
                ' Now find where to put the value for this desc2
                descFound = False
                
                ' Calculate the range to search for Description 2
                If j < UBound(ccPositions) Then
                    searchEndRow = ccPositions(j + 1) - 2
                Else
                    searchEndRow = ccPositions(j) + 15
                End If
                
                For k = ccPositions(j) + 1 To searchEndRow
                    If CStr(forecastSheet.Cells(k, 3).Value) = currentDesc2 Then
                        descFound = True
                        ccDescFound = ccDescFound + 1
                        
                        ' Found the right row for this desc2, place the amount in the period column
                        forecastSheet.Cells(k, periodCol).Value = amount
                        
                        ' Log the data placement
                        logSheet.Cells(logRow, 1).Value = Now()
                        logSheet.Cells(logRow, 2).Value = "Data Placed"
                        logSheet.Cells(logRow, 3).Value = "CC: " & currentCC & ", Desc2: " & currentDesc2 & ", Amount: " & amount
                        logSheet.Cells(logRow, 4).Value = "Cell " & k & "," & periodCol
                        logRow = logRow + 1
                        
                        entriesPopulated = entriesPopulated + 1
                        Exit For
                    End If
                Next k
                
                If Not descFound Then
                    ' Log missing Description 2
                    logSheet.Cells(logRow, 1).Value = Now()
                    logSheet.Cells(logRow, 2).Value = "Missing Description 2"
                    logSheet.Cells(logRow, 3).Value = "Could not find Description 2 '" & currentDesc2 & "' under CC '" & currentCC & "'"
                    logSheet.Cells(logRow, 4).Value = "Warning"
                    logRow = logRow + 1
                End If
                
                Exit For
            End If
            On Error GoTo 0
        Next j
        
        If Not ccFound Then
            ' Log missing CC
            logSheet.Cells(logRow, 1).Value = Now()
            logSheet.Cells(logRow, 2).Value = "Missing CC"
            logSheet.Cells(logRow, 3).Value = "Could not find CC '" & currentCC & "' in Forecast sheet"
            logSheet.Cells(logRow, 4).Value = "Warning"
            logRow = logRow + 1
        End If
        
NextCombination:
    Next i
    
    ' Format cells as numbers if they're currently text
    For i = 0 To UBound(ccPositions)
        formattingCC = CStr(forecastSheet.Cells(ccPositions(i), 3).Value)
        
        If ccPeriodColumns.Exists(formattingCC) Then
            colToFormat = ccPeriodColumns(formattingCC)
            
            ' Calculate range to format
            formatStartRow = ccPositions(i) + 1
            
            If i < UBound(ccPositions) Then
                formatEndRow = ccPositions(i + 1) - 2
            Else
                formatEndRow = ccPositions(i) + 15
            End If
            
            ' Format the column as numbers
            FormatColumnAsNumber forecastSheet, colToFormat, formatStartRow, formatEndRow
        End If
    Next i
    
    ' Final logging
    logSheet.Cells(logRow, 1).Value = Now()
    logSheet.Cells(logRow, 2).Value = "Population Complete"
    logSheet.Cells(logRow, 3).Value = "Populated " & entriesPopulated & " entries out of " & dataDict.Count & " unique combinations"
    logSheet.Cells(logRow, 4).Value = "Success"
    logRow = logRow + 1
    
    logSheet.Cells(logRow, 1).Value = Now()
    logSheet.Cells(logRow, 2).Value = "Summary"
    logSheet.Cells(logRow, 3).Value = "Found " & mappingsFound & " account mappings, matched " & ccDescFound & " CC/Description 2 pairs"
    logSheet.Cells(logRow, 4).Value = "Info"
    logRow = logRow + 1
    
    ' Format log sheet
    With logSheet.Range("A1:D" & logRow)
        .Columns.AutoFit
    End With
    
    ' Activate the Forecast sheet to show results
    forecastSheet.Activate
    
    ' Final message
    MsgBox "Tables in the Forecast sheet have been populated with data from " & specificSheetName & "." & vbNewLine & _
           "Check the ProcessLog sheet for details.", vbInformation
    
CleanupAndExit:
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    Application.Calculation = xlCalculationAutomatic
End Sub

' Helper function to format a column range as numbers
Sub FormatColumnAsNumber(ws As Worksheet, col As Long, startRow As Long, endRow As Long)
    Dim cell As Range
    
    For Each cell In ws.Range(ws.Cells(startRow, col), ws.Cells(endRow, col))
        If IsNumeric(cell.Value) Then
            cell.NumberFormat = "#,##0.00" ' Standard number format with 2 decimal places
        End If
    Next cell
End Sub
